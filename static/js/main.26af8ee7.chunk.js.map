{"version":3,"sources":["scrapper.js","App.js","serviceWorker.js","index.js"],"names":["Scrapper","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","react_default","a","createElement","className","Card","lib_default","value","code","CardText","axios","get","then","res","resultList","cheerioload","cheerio","load","data","each","i","elem","text","replace","Array","from","Set","_this2","Promise","resolve","listFriendCode","result","setState","error","_this3","listItems","map","number","Cart","key","toString","React","Component","App","scrapper_Scrapper","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0ZAQqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,KAAM,IAHOR,oEAOfD,GACF,OACIU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACIJ,EAAAC,EAAAC,cAAA,OAAKC,UAAW,eACZH,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAQK,MAAOhB,EAAMiB,QAEzBP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KAAWlB,EAAMiB,kDASjC,OADiBE,IAAMC,IAAI,+DAEdC,KAAK,SAAAC,GACd,IAAMC,EAAa,GACbC,EAAcC,IAAQC,KAAKJ,EAAIK,MAMrC,OAJAH,EAAY,cAAcI,KAAK,SAAUC,EAAGC,GACxCP,EAAWM,GAAKL,EAAYM,GAAMC,OAAOC,QAAQ,MAAO,MAEvCC,MAAMC,KAAK,IAAIC,IAAIZ,mDAI3B,IAAAa,EAAAhC,KACH,IAAIiC,QAAQ,SAAAC,GACpBA,EAAQF,EAAKG,oBAGblB,KAAK,SAAAmB,GACTJ,EAAKK,SAAS,CAAEhC,KAAM+B,KACvB,SAASE,GACRtC,KAAKqC,SAAS,CAAEhC,KAAMiC,uCAInB,IAAAC,EAAAvC,KAEDwC,EAAYxC,KAAKI,MAAMC,KAAKoC,IAAI,SAAAC,GAAM,OACxCpC,EAAAC,EAAAC,cAAC+B,EAAKI,KAAN,CAAWC,IAAKF,EAAOG,WAAYhC,KAAM6B,MAE7C,OAEIpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACfH,EAAAC,EAAAC,cAAA,yCACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gDACV+B,aA7DeM,IAAMC,WCE7BC,MAPf,WACE,OACE1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAACyC,EAAD,QCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kECXNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC","file":"static/js/main.26af8ee7.chunk.js","sourcesContent":["import axios from 'axios';\nimport React from 'react';\nimport cheerio from 'cheerio';\nimport QRCode from 'qrcode.react';\nimport { Card , CardText } from 'reactstrap';\n\n\n\nexport default class Scrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        name: []\n     };\n}\n\n Cart(props) {\n    return(\n        <div className=\"col-md-4\">\n            <div className=\"card mb-4 shadow-sm center-block\">\n                <Card>\n                    <div className={'center mt-0'}>\n                        <QRCode value={props.code}/>\n                    </div>\n                    <CardText>{props.code}</CardText>\n                </Card>\n            </div>\n        </div>\n    );\n}\n\nlistFriendCode() {\n    const resAxios = axios.get('https://www.maison-gourmande.com/codes-amis-pokemon-go.html');\n    return(\n        resAxios.then(res => {\n        const resultList = [];\n        const cheerioload = cheerio.load(res.data);\n\n        cheerioload('.two, .one').each(function (i, elem) {\n            resultList[i] = cheerioload(elem).text().replace(/\\s/g, '');\n        });\n        const uniqueQrcode = Array.from(new Set(resultList));\n        return uniqueQrcode;\n    }));\n}\ncomponentWillMount() {\n  const promise = new Promise(resolve => {\n          resolve(this.listFriendCode());\n\n  });\n  promise.then(result => {\n      this.setState({ name: result });\n  }, function(error) {\n      this.setState({ name: error });\n  });\n}\n\nrender() {\n\n  const listItems = this.state.name.map(number =>\n      <this.Cart key={number.toString()} code={number} />\n  );\n  return (\n   \n      <div className=\"container\">\n          <div className=\"album py-5 bg-light\">\n          <h2>Liste codes Amis Pokemon GO</h2>\n              <div className=\"container mt-0\">\n                  <div className=\"row text-center img-responsive center-block \">\n                      {listItems}\n                  </div>\n              </div>\n          </div>\n      </div>\n    \n  );\n}\n}\n","import React from 'react';\nimport './App.css';\nimport Scrapper from './scrapper'\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Scrapper/>\n  </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}